{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rigel\\\\apps\\\\translate\\\\src\\\\components\\\\Pronunciation.jsx\";\nimport React, { useState } from \"react\";\n\nfunction Pronunce(props) {\n  const [pronounce, setPronounce] = useState([]);\n  fetch(\"https://www.dictionaryapi.com/api/v3/references/collegiate/json/\" + props.addWord + \"?key=1f40dde8-50d6-4eb6-9168-6f465c469eb9\").then(response => response.json()).then(jsonResponse => {\n    // Populate the array\n    // For each item in the response array\n    for (var i = 0; i < jsonResponse.length; i++) {\n      // Skip if the item doesn't have a prs parameter\n      if (jsonResponse[i].hwi.prs == undefined) {// If it has a prs parameter, then get the pos (fl) and prs\n      } else {\n        var flValue = jsonResponse[i].fl;\n        var prsArray = jsonResponse[i].hwi.prs; // For each item in the prs array\n\n        for (var j = 0; j < prsArray.length; j++) {\n          // Skip if the prs doesn't have a sound parameter with it\n          var wordArray = [];\n\n          if (prsArray[j].sound == undefined) {// Skip here if undefined\n          } else if (pronounce.toString().includes(prsArray[j].sound.audio) == true) {} else {\n            // If it has a sound parameter, grab the written pronunciation and audio file name, and along with flValue, send to myArray\n            var writtenPron = prsArray[j].mw;\n            var audioPron = prsArray[j].sound.audio; // Push the fl (pos), mw (written pronunciation) and audio (sound file name) into an array\n\n            wordArray.push(flValue, writtenPron, audioPron);\n            setPronounce(wordArray);\n          }\n\n          ; // End of nested if statement\n        }\n\n        ; // End of nested for statement\n      }\n    }\n\n    console.log(pronounce);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"definition\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 14\n    }\n  }, \"Sound \\u2022 word\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"space\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  })));\n}\n\nexport default Pronunce;","map":{"version":3,"sources":["C:/Users/rigel/apps/translate/src/components/Pronunciation.jsx"],"names":["React","useState","Pronunce","props","pronounce","setPronounce","fetch","addWord","then","response","json","jsonResponse","i","length","hwi","prs","undefined","flValue","fl","prsArray","j","wordArray","sound","toString","includes","audio","writtenPron","mw","audioPron","push","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAEtB,QAAM,CAACC,SAAD,EAAWC,YAAX,IAAyBJ,QAAQ,CAAC,EAAD,CAAvC;AAEAK,EAAAA,KAAK,CAAC,qEAAmEH,KAAK,CAACI,OAAzE,GAAiF,2CAAlF,CAAL,CACCC,IADD,CACMC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADjB,EAECF,IAFD,CAEMG,YAAY,IAAG;AACnB;AACA;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACD,YAAY,CAACE,MAA3B,EAAkCD,CAAC,EAAnC,EAAsC;AACtC;AACE,UAAGD,YAAY,CAACC,CAAD,CAAZ,CAAgBE,GAAhB,CAAoBC,GAApB,IAA0BC,SAA7B,EAAuC,CACzC;AACG,OAFD,MAEK;AACH,YAAIC,OAAO,GAAGN,YAAY,CAACC,CAAD,CAAZ,CAAgBM,EAA9B;AACA,YAAIC,QAAQ,GAAGR,YAAY,CAACC,CAAD,CAAZ,CAAgBE,GAAhB,CAAoBC,GAAnC,CAFG,CAGH;;AACA,aAAK,IAAIK,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,QAAQ,CAACN,MAAzB,EAAiCO,CAAC,EAAlC,EAAsC;AACpC;AACA,cAAIC,SAAS,GAAG,EAAhB;;AACA,cAAIF,QAAQ,CAACC,CAAD,CAAR,CAAYE,KAAZ,IAAqBN,SAAzB,EAAoC,CAChC;AACH,WAFD,MAEO,IAAKZ,SAAS,CAACmB,QAAV,EAAD,CAAuBC,QAAvB,CAAgCL,QAAQ,CAACC,CAAD,CAAR,CAAYE,KAAZ,CAAkBG,KAAlD,KAA4D,IAAhE,EAAsE,CAC5E,CADM,MACA;AACH;AACA,gBAAIC,WAAW,GAAGP,QAAQ,CAACC,CAAD,CAAR,CAAYO,EAA9B;AACA,gBAAIC,SAAS,GAAGT,QAAQ,CAACC,CAAD,CAAR,CAAYE,KAAZ,CAAkBG,KAAlC,CAHG,CAIH;;AACAJ,YAAAA,SAAS,CAACQ,IAAV,CAAeZ,OAAf,EAAwBS,WAAxB,EAAqCE,SAArC;AACAvB,YAAAA,YAAY,CAACgB,SAAD,CAAZ;AACH;;AAAA,WAbmC,CAajC;AACN;;AAAA,SAlBI,CAkBF;AACF;AACJ;;AAECS,IAAAA,OAAO,CAACC,GAAR,CAAY3B,SAAZ;AACC,GAhCH;AAiCE,sBAAO;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAFF,CAAP;AAMH;;AAED,eAAeF,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Pronunce(props){\r\n\r\n  const [pronounce,setPronounce]=useState([]);\r\n\r\n  fetch(\"https://www.dictionaryapi.com/api/v3/references/collegiate/json/\"+props.addWord+\"?key=1f40dde8-50d6-4eb6-9168-6f465c469eb9\")\r\n  .then(response=> response.json())\r\n  .then(jsonResponse =>{\r\n    // Populate the array\r\n    // For each item in the response array\r\n    for(var i=0;i<jsonResponse.length;i++){\r\n    // Skip if the item doesn't have a prs parameter\r\n      if(jsonResponse[i].hwi.prs== undefined){\r\n    // If it has a prs parameter, then get the pos (fl) and prs\r\n      }else{\r\n        var flValue = jsonResponse[i].fl;\r\n        var prsArray = jsonResponse[i].hwi.prs;\r\n        // For each item in the prs array\r\n        for (var j=0; j<prsArray.length; j++) {\r\n          // Skip if the prs doesn't have a sound parameter with it\r\n          var wordArray = [];\r\n          if (prsArray[j].sound == undefined) {\r\n              // Skip here if undefined\r\n          } else if ((pronounce.toString()).includes(prsArray[j].sound.audio) == true) {\r\n          } else {\r\n              // If it has a sound parameter, grab the written pronunciation and audio file name, and along with flValue, send to myArray\r\n              var writtenPron = prsArray[j].mw;\r\n              var audioPron = prsArray[j].sound.audio;\r\n              // Push the fl (pos), mw (written pronunciation) and audio (sound file name) into an array\r\n              wordArray.push(flValue, writtenPron, audioPron);\r\n              setPronounce(wordArray);\r\n          }; // End of nested if statement\r\n      }; // End of nested for statement\r\n      }\r\n  }\r\n   \r\n    console.log(pronounce)\r\n    })\r\n    return <div className=\"definition\">\r\n             <h2>Sound â€¢ word</h2>\r\n             <div className=\"space\">\r\n              <p></p>\r\n             </div>\r\n           </div>\r\n}\r\n\r\nexport default Pronunce;"]},"metadata":{},"sourceType":"module"}