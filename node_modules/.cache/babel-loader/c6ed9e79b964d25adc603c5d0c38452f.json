{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rigel\\\\apps\\\\translate\\\\src\\\\components\\\\Pronunciation.jsx\";\nimport React, { useState } from \"react\";\n\nfunction Pronunce(props) {\n  const [pronounce, setPronounce] = useState([]);\n  fetch(\"https://www.dictionaryapi.com/api/v3/references/collegiate/json/\" + props.addWord + \"?key=1f40dde8-50d6-4eb6-9168-6f465c469eb9\").then(response => response.json()).then(jsonResponse => {\n    // Populate the array\n    // For each item in the response array\n    jsonResponse.map(word => {\n      // Skip if the item doesn't have a prs parameter\n      if (word.hwi.prs === undefined) {// If it has a prs parameter, then get the pos (fl) and prs\n      } else {\n        var flValue = word.fl;\n        var prsArray = word.hwi.prs; // For each item in the prs array\n\n        prsArray.filter(item => {\n          var wordArray = [];\n\n          if (item.sound === undefined) {// Skip here if undefined\n          } else if (pronounce.toString().includes(item.sound.audio) === true) {} else {\n            // If it has a sound parameter, grab the written pronunciation and audio file name, and along with flValue, send to myArray\n            var writenPron = item.mw;\n            var audioPron = item.sound.audio; // Push the fl (pos), mw (written pronunciation) and audio (sound file name) into an array\n\n            wordArray.push(flValue, writenPron, audioPron);\n            setPronounce(wordArray);\n          } // End of nested if statement\n\n        }); // End of nested for statement\n      } // End of first if statement\n\n    }); // End of for response.length statement\n  });\n  pronounce.filter(item => {\n    var pos = item[0];\n    var pron = item[1];\n    var file = item[2]; // Logic for subdirectory in order to create url\n\n    var uniChar = file.slice(0, 1);\n    var biChar = file.slice(0, 2);\n    var triChar = file.slice(0, 3);\n    var subDir = \"\";\n\n    if (triChar === \"bix\") {\n      subDir = \"bix\";\n    } else if (biChar === \"gg\") {\n      subDir = \"gg\";\n    } else if (alphabetic(uniChar) === true) {\n      subDir = uniChar;\n    } else {\n      subDir = \"number\";\n    } // Function to check letters\n\n\n    function alphabetic(inputtxt) {\n      var letters = /^[a-zA-Z]+$/;\n\n      if (inputtxt.match(letters)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    var url = \"https://media.merriam-webster.com/soundc11/\" + subDir + \"/\" + file + \".wav\";\n    console.log(pron);\n    console.log(pos);\n    console.log(url);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"definition\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 14\n    }\n  }, \"Sound \\u2022 word\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"space\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 14\n    }\n  }, props.pron), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"play-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, \"text here\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"play\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, \"Play\")));\n}\n\nexport default Pronunce;","map":{"version":3,"sources":["C:/Users/rigel/apps/translate/src/components/Pronunciation.jsx"],"names":["React","useState","Pronunce","props","pronounce","setPronounce","fetch","addWord","then","response","json","jsonResponse","map","word","hwi","prs","undefined","flValue","fl","prsArray","filter","item","wordArray","sound","toString","includes","audio","writenPron","mw","audioPron","push","pos","pron","file","uniChar","slice","biChar","triChar","subDir","alphabetic","inputtxt","letters","match","url","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAEtB,QAAM,CAACC,SAAD,EAAWC,YAAX,IAAyBJ,QAAQ,CAAC,EAAD,CAAvC;AAGAK,EAAAA,KAAK,CAAC,qEAAmEH,KAAK,CAACI,OAAzE,GAAiF,2CAAlF,CAAL,CACCC,IADD,CACMC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADjB,EAECF,IAFD,CAEMG,YAAY,IAAG;AACnB;AACA;AACAA,IAAAA,YAAY,CAACC,GAAb,CAAkBC,IAAD,IAAU;AACxB;AACD,UAAGA,IAAI,CAACC,GAAL,CAASC,GAAT,KAAeC,SAAlB,EAA4B,CAC3B;AACA,OAFD,MAEM;AACJ,YAAIC,OAAO,GAAGJ,IAAI,CAACK,EAAnB;AACA,YAAIC,QAAQ,GAAGN,IAAI,CAACC,GAAL,CAASC,GAAxB,CAFI,CAGL;;AACAI,QAAAA,QAAQ,CAACC,MAAT,CAAiBC,IAAD,IAAQ;AACvB,cAAIC,SAAS,GAAG,EAAhB;;AACC,cAAGD,IAAI,CAACE,KAAL,KAAcP,SAAjB,EAA2B,CAC3B;AACC,WAFD,MAEM,IAAIZ,SAAS,CAACoB,QAAV,EAAD,CAAuBC,QAAvB,CAAgCJ,IAAI,CAACE,KAAL,CAAWG,KAA3C,MAAsD,IAAzD,EAA8D,CACpE,CADM,MACF;AACL;AACE,gBAAIC,UAAU,GAAGN,IAAI,CAACO,EAAtB;AACA,gBAAIC,SAAS,GAAGR,IAAI,CAACE,KAAL,CAAWG,KAA3B,CAHG,CAIL;;AACEJ,YAAAA,SAAS,CAACQ,IAAV,CAAeb,OAAf,EAAuBU,UAAvB,EAAkCE,SAAlC;AACCxB,YAAAA,YAAY,CAACiB,SAAD,CAAZ;AACF,WAZsB,CAYtB;;AAED,SAdD,EAJK,CAkBH;AACJ,OAvB0B,CAuB1B;;AACF,KAxBC,EAHmB,CA2BnB;AACH,GA9BC;AA+BFlB,EAAAA,SAAS,CAACgB,MAAV,CAAkBC,IAAD,IAAQ;AACvB,QAAIU,GAAG,GAAGV,IAAI,CAAC,CAAD,CAAd;AACA,QAAIW,IAAI,GAAGX,IAAI,CAAC,CAAD,CAAf;AACA,QAAIY,IAAI,GAAGZ,IAAI,CAAC,CAAD,CAAf,CAHuB,CAIzB;;AACE,QAAIa,OAAO,GAAGD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAa,CAAb,CAAd;AACA,QAAIC,MAAM,GAAGH,IAAI,CAACE,KAAL,CAAW,CAAX,EAAa,CAAb,CAAb;AACA,QAAIE,OAAO,GAAGJ,IAAI,CAACE,KAAL,CAAW,CAAX,EAAa,CAAb,CAAd;AACA,QAAIG,MAAM,GAAG,EAAb;;AACA,QAAID,OAAO,KAAK,KAAhB,EAAuB;AACnBC,MAAAA,MAAM,GAAG,KAAT;AACH,KAFD,MAEO,IAAIF,MAAM,KAAK,IAAf,EAAqB;AACxBE,MAAAA,MAAM,GAAG,IAAT;AACH,KAFM,MAEA,IAAIC,UAAU,CAACL,OAAD,CAAV,KAAwB,IAA5B,EAAkC;AACrCI,MAAAA,MAAM,GAAGJ,OAAT;AACH,KAFM,MAEA;AACHI,MAAAA,MAAM,GAAG,QAAT;AACH,KAjBsB,CAkBtB;;;AACD,aAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,UAAIC,OAAO,GAAG,aAAd;;AACA,UAAKD,QAAQ,CAACE,KAAT,CAAeD,OAAf,CAAL,EAA+B;AAC3B,eAAO,IAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACF;;AACD,QAAIE,GAAG,GAAG,gDAAgDL,MAAhD,GAAyD,GAAzD,GAA+DL,IAA/D,GAAsE,MAAhF;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYd,GAAZ;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GA/BD;AAiCI,sBAAO;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKxC,KAAK,CAAC6B,IAAX,CADA,eAEC;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFD,eAGC;AAAS,IAAA,SAAS,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHD,CAFF,CAAP;AAQH;;AAED,eAAe9B,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Pronunce(props){\r\n\r\n  const [pronounce,setPronounce]=useState([]);\r\n  \r\n\r\n  fetch(\"https://www.dictionaryapi.com/api/v3/references/collegiate/json/\"+props.addWord+\"?key=1f40dde8-50d6-4eb6-9168-6f465c469eb9\")\r\n  .then(response=> response.json())\r\n  .then(jsonResponse =>{\r\n    // Populate the array\r\n    // For each item in the response array\r\n    jsonResponse.map((word) => {\r\n       // Skip if the item doesn't have a prs parameter\r\n      if(word.hwi.prs===undefined){\r\n       // If it has a prs parameter, then get the pos (fl) and prs\r\n      } else{\r\n        var flValue = word.fl;\r\n        var prsArray = word.hwi.prs;\r\n       // For each item in the prs array\r\n       prsArray.filter((item)=>{\r\n        var wordArray = [];\r\n         if(item.sound ===undefined){\r\n         // Skip here if undefined\r\n         }else if((pronounce.toString()).includes(item.sound.audio) === true){\r\n        }else{\r\n        // If it has a sound parameter, grab the written pronunciation and audio file name, and along with flValue, send to myArray\r\n          var writenPron = item.mw;\r\n          var audioPron = item.sound.audio;\r\n        // Push the fl (pos), mw (written pronunciation) and audio (sound file name) into an array\r\n          wordArray.push(flValue,writenPron,audioPron);\r\n           setPronounce(wordArray)\r\n        }// End of nested if statement\r\n\r\n       })// End of nested for statement\r\n    }// End of first if statement\r\n  })// End of for response.length statement\r\n})\r\npronounce.filter((item)=>{\r\n  var pos = item[0];\r\n  var pron = item[1];\r\n  var file = item[2];\r\n// Logic for subdirectory in order to create url\r\n  var uniChar = file.slice(0,1);\r\n  var biChar = file.slice(0,2);\r\n  var triChar = file.slice(0,3);\r\n  var subDir = \"\";\r\n  if (triChar === \"bix\") {\r\n      subDir = \"bix\";\r\n  } else if (biChar === \"gg\") {\r\n      subDir = \"gg\";\r\n  } else if (alphabetic(uniChar) === true) {\r\n      subDir = uniChar;\r\n  } else {\r\n      subDir = \"number\";\r\n  }\r\n   // Function to check letters\r\n  function alphabetic(inputtxt) {\r\n    var letters = /^[a-zA-Z]+$/;\r\n    if ((inputtxt.match(letters))) {\r\n        return true;\r\n    } else {\r\n        return false; \r\n    }\r\n  }\r\n  var url = \"https://media.merriam-webster.com/soundc11/\" + subDir + \"/\" + file + \".wav\";\r\n  console.log(pron)\r\n  console.log(pos)\r\n  console.log(url)\r\n})\r\n  \r\n    return <div className=\"definition\">\r\n             <h2>Sound â€¢ word</h2>\r\n             <div className=\"space\">\r\n             <h3>{props.pron}</h3>\r\n              <p className=\"play-text\">text here</p>\r\n              <button  className=\"play\">Play</button>\r\n             </div>\r\n           </div>\r\n}\r\n\r\nexport default Pronunce;"]},"metadata":{},"sourceType":"module"}