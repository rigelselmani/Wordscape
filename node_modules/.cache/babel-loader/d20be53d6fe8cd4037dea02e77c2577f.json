{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rigel\\\\apps\\\\translate\\\\src\\\\components\\\\Pronunciation.jsx\";\nimport React, { useState } from \"react\";\n\nfunction Pronunce(props) {\n  const [pronounce, setPronounce] = useState([]);\n  fetch(\"https://www.dictionaryapi.com/api/v3/references/collegiate/json/\" + props.addWord + \"?key=1f40dde8-50d6-4eb6-9168-6f465c469eb9\").then(response => response.json()).then(jsonResponse => {\n    // Populate the array\n    // For each item in the response array\n    jsonResponse.filter(word => {\n      // Skip if the item doesn't have a prs parameter\n      if (word.hwi.prs === undefined) {// If it has a prs parameter, then get the pos (fl) and prs\n      } else {\n        var flValue = word.fl;\n        var prsArray = word.hwi.prs; // For each item in the prs array\n\n        prsArray.filter(item => {\n          var wordArray = [];\n\n          if (item.sound == undefined) {// Skip here if undefined\n          } else if (myArray.toString().includes(prsArray[j].sound.audio) == true) {}\n        });\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"definition\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 14\n    }\n  }, \"Sound \\u2022 word\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"space\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"play-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 15\n    }\n  }, \"text here\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"play\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  }, \"Play\")));\n}\n\nexport default Pronunce;","map":{"version":3,"sources":["C:/Users/rigel/apps/translate/src/components/Pronunciation.jsx"],"names":["React","useState","Pronunce","props","pronounce","setPronounce","fetch","addWord","then","response","json","jsonResponse","filter","word","hwi","prs","undefined","flValue","fl","prsArray","item","wordArray","sound","myArray","toString","includes","j","audio"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAEtB,QAAM,CAACC,SAAD,EAAWC,YAAX,IAAyBJ,QAAQ,CAAC,EAAD,CAAvC;AAGAK,EAAAA,KAAK,CAAC,qEAAmEH,KAAK,CAACI,OAAzE,GAAiF,2CAAlF,CAAL,CACCC,IADD,CACMC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADjB,EAECF,IAFD,CAEMG,YAAY,IAAG;AACnB;AACA;AACAA,IAAAA,YAAY,CAACC,MAAb,CAAqBC,IAAD,IAAU;AAC3B;AACA,UAAGA,IAAI,CAACC,GAAL,CAASC,GAAT,KAAeC,SAAlB,EAA4B,CAC5B;AACA,OAFA,MAEI;AACH,YAAIC,OAAO,GAAGJ,IAAI,CAACK,EAAnB;AACA,YAAIC,QAAQ,GAAGN,IAAI,CAACC,GAAL,CAASC,GAAxB,CAFG,CAGJ;;AACAI,QAAAA,QAAQ,CAACP,MAAT,CAAiBQ,IAAD,IAAQ;AACvB,cAAIC,SAAS,GAAG,EAAhB;;AACC,cAAGD,IAAI,CAACE,KAAL,IAAaN,SAAhB,EAA0B,CAC1B;AACC,WAFD,MAEM,IAAIO,OAAO,CAACC,QAAR,EAAD,CAAqBC,QAArB,CAA8BN,QAAQ,CAACO,CAAD,CAAR,CAAYJ,KAAZ,CAAkBK,KAAhD,KAA0D,IAA7D,EAAkE,CACxE;AACD,SAND;AAOA;AACF,KAhBD;AAiBC,GAtBH;AAwBE,sBAAO;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD,eAEC;AAAS,IAAA,SAAS,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD,CAFF,CAAP;AAOH;;AAED,eAAezB,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Pronunce(props){\r\n\r\n  const [pronounce,setPronounce]=useState([]);\r\n  \r\n\r\n  fetch(\"https://www.dictionaryapi.com/api/v3/references/collegiate/json/\"+props.addWord+\"?key=1f40dde8-50d6-4eb6-9168-6f465c469eb9\")\r\n  .then(response=> response.json())\r\n  .then(jsonResponse =>{\r\n    // Populate the array\r\n    // For each item in the response array\r\n    jsonResponse.filter((word) => {\r\n       // Skip if the item doesn't have a prs parameter\r\n       if(word.hwi.prs===undefined){\r\n       // If it has a prs parameter, then get the pos (fl) and prs\r\n      }else{\r\n        var flValue = word.fl;\r\n        var prsArray = word.hwi.prs;\r\n       // For each item in the prs array\r\n       prsArray.filter((item)=>{\r\n        var wordArray = [];\r\n         if(item.sound ==undefined){\r\n         // Skip here if undefined\r\n         }else if((myArray.toString()).includes(prsArray[j].sound.audio) == true){\r\n        }\r\n       })\r\n      }\r\n    })\r\n    })\r\n  \r\n    return <div className=\"definition\">\r\n             <h2>Sound â€¢ word</h2>\r\n             <div className=\"space\">\r\n              <p className=\"play-text\">text here</p>\r\n              <button  className=\"play\">Play</button>\r\n             </div>\r\n           </div>\r\n}\r\n\r\nexport default Pronunce;"]},"metadata":{},"sourceType":"module"}